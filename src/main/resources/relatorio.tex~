\documentclass[a4paper,11pt]{article}

%Packages
\usepackage[brazilian]{babel} %Brazilian Portuguese
\usepackage[T1]{fontenc}
\usepackage{subfig}
\usepackage{color}
\usepackage[utf8]{inputenc}
\usepackage{url} %URLs
\usepackage{makeidx} %Index
\usepackage[pdftex]{graphicx} %Graphics
\usepackage{amsfonts} %Math fonts
%\usepackage{indentfirst} %Makes it indent the first paragraph of the section
\usepackage{listings} %Code support, properly highlighted
\usepackage{verbatim} %Better verbatim
%\usepackage{fancyvrb} %Fancy verbatim
\usepackage{cite} %Better citation
%\usepackage{siunitx} %SI Units 
\usepackage{hyperref} %Makes links to your references, making your life quite a bit easier.
%\usepackage[pdftex]{colortbl} %Color Tables
\usepackage{array} %Better tables - improves the algorythms
\hypersetup{ %Sets up hyperref
    %bookmarks=true,         % show bookmarks bar?
    %unicode=false,          % non-Latin characters in Acrobat?s bookmarks
    %pdftoolbar=true,        % show Acrobat?s toolbar?
    %pdfmenubar=true,        % show Acrobat?s menu?
    %pdffitwindow=false,     % window fit to page when opened
    %pdfstartview={FitH},    % fits the width of the page to the window
    pdftitle={Relatório},    % title
    %pdfauthor={Felipe Brandão Cavalcanti},     % author
    colorlinks=false,       % false: boxed links; true: colored links
    linkcolor=red,          % color of internal links
    citecolor=green,        % color of links to bibliography
    filecolor=magenta,      % color of file links
    urlcolor=cyan           % color of external links
}
\lstset{ %Sets up lisitings, so we get highlighted code
language=Java,                     % choose the language of the code
basicstyle=\footnotesize,       % the size of the fonts that are used for the code
numbers=left,                   % where to put the line-numbers
numberstyle=\footnotesize,      % the size of the fonts that are used for the line-numbers
stepnumber=2,                   % the step between two line-numbers. If it's 1 each line will be numbered
numbersep=5pt,                  % how far the line-numbers are from the code
backgroundcolor=\color{white},  % choose the background color. You must add \usepackage{color}
showspaces=false,               % show spaces adding particular underscores
showstringspaces=false,         % underline spaces within strings
showtabs=false,                 % show tabs within strings adding particular underscores
frame=single,	                % adds a frame around the code
tabsize=2,	                    % sets default tabsize to 2 spaces
captionpos=b,                   % sets the caption-position to bottom
breaklines=true,                % sets automatic line breaking
breakatwhitespace=false,        % sets if automatic breaks should only happen at whitespace
escapeinside={\%*}{*)}          % if you want to add a comment within your code
}


\parindent15pt  \parskip0pt
\setlength\voffset{-2.0cm}
\setlength\hoffset{-1.5cm}
\setlength\textwidth{16.0cm}
\setlength\textheight{24.5cm}
\setlength\baselineskip{2cm}
\renewcommand{\baselinestretch}{1.2}

\newcommand{\HRule}{\rule{\linewidth}{0.5mm}}

\begin{document}
\begin{titlepage}
\begin{center}
 
% Upper part of the page
\includegraphics[width=0.25\textwidth]{./unb.pdf}\\[1cm]
 
\textsc{\LARGE Universidade de Brasília}\\[1.5cm]
 
\textsc{\Large Estrutura de Dados - Turma B - Trabalho I}\\[0.5cm]
 
% Title
\HRule \\[0.4cm]
{ \huge \bfseries Avaliação de Expressões Aritméticas\\Forma Posfixa}
\HRule
\vspace{0.75cm}
\large CIC - Departamento de Ciência da Computação\\
\vspace{0.8cm}
% Author and supervisor
\begin{minipage}{0.4\textwidth}
\begin{flushleft} \large
\emph{Autores:}\\
Tiago L. P. de Pádua - 12/1042457\\
Ronaldo S. Ferreira Jr. - 09/48721\\
Alex Leite - 05/97694\\
\end{flushleft}
\end{minipage}
\begin{minipage}{0.4\textwidth}
\begin{flushright} \large
\emph{Professor:} \\
Eduardo A. P. Alchieri
\end{flushright}
\end{minipage}
 
\vfill
 
% Bottom of the page
{\large Dezembro de 2012}
\end{center}
\end{titlepage}

\pagestyle{plain}

%\begin{abstract}
%Através do estudo de estrututa de dados, este trabalho tem o objetivo a confecção de um projeto, onde deverá ser feito um $software$ capaz de de validar, avaliar e realizar a conversão de uma expressão aritmética escrita em forma infixa para a forma posfixa.
%\end{abstract}

\section{Introdução} 
Através do estudo de estrututa de dados, este trabalho tem o objetivo a confecção de um projeto, onde deverá ser feito um $software$ capaz de de validar, avaliar e realizar a conversão de uma expressão aritmética escrita em forma infixa para a forma posfixa.

Dada uma expressão aritmética qualquer, inicialmente iremos realizar sua validação, verificando se todos os parênteses abertos na expressão foram devidamente fechados, ou seja, procurando por leves inconsistencias na expressão aritmética. 
A seguir, iremos converter a expressão de sua forma infixa para a forma posfixa, conforme exemplo abaixo:

Exemplo I:

Forma infixa: \(A*B+C-(D/E+F)\)

Forma posfixa: \(A B*C+D E/F+-\)

Exemplo II:

Forma infixa: \(10*5+6-(8/2+7)\)

Forma posfixa: \(10\ 5* 6+ 8 2/7 +-\)

Após obtermos a forma posfixa da expressão iremos realizar sua avaliação, isto é, efetuar o cálculo da expressão e exibir seu resultado, caso a entrada de parâmetros seja numérica.

\section{Implementação}
A implementação do código foi realizada utilizando a linguagem de programação Java (javac 1.6.0\_37) através da plataforma de desenvolvimento Netbeans 7.0.1.\\

As seguintes classes foram criadas:
\begin{itemize}
  \item Elemento.java
  \item Pilha.java
  \item PilhaVaziaException.java
  \item ExpressaoAritmetica.java
  \item ExpressaoGUI.java
  \item ProcessadorException.java
\end{itemize}

\subsection{Elemento.java}
Classe que serve de base para implementação de uma Pilha, possui somente os campos valor:Object e proximo:Elemento e seus métodos auxiliares. Como "valor" é do tipo Object, esta implamentação de pilha é genérica e servirá a qualquer tipo de dados.
A classe Elemento carrega os objetos contidos em uma Pilha.

\subsection{Pilha.java}
Possui os campos tamanho:int, que contém o tamanho corrente da pilha e, topo:Elemento, onde está indicado o elemento localizado no topo da Pilha. Os métodos implementados são os necessários para a utilização da pilha: 
\begin{itemize}
  \item public void empilhar(Object valor);\\
Para empilhar elementos na Pilha (operação $push$).
  \item public Object desempilhar(\ ) throws PilhaVaziaException;\\Para desempilhar elementos da Pilha (operação $pop$), caso a Pilha esteja vazia, uma mensagem de erro é lançada ao sistema.
  \item public int getTamanho(\ );\\Exibe o tamanho da Pilha.
  \item public boolean isVazio(\ );\\Checa se a Pilha está vazia.
  \item public Object getTopo(\ ) throws PilhaVaziaException;\\Lê o objeto no topo da Pilha.
\end{itemize}

\subsection{PilhaVaziaException.java}
Classe criada para identificar a mensagem de erro lançada, caso tente-se desempilhar uma Pilha vazia.

\subsection{ExpressaoAritmetica.java}
Classe principal do programa, possui o campo expressao:String que deve ser iniciado com a expressão a ser trabalhada, são implementados os seguintes métodos:

\subsubsection{private boolean possuiCaracteresInvalidosNumericos(\ )}
Este método retorna  \emph{$true$}, caso a expressão aritmética numérica informada na classe possua caracteres estranhos à uma expressão aritmética numérica válida, para isso, utilizou-se uma expressão regular. 

\subsubsection{private boolean possuiCaracteresInvalidosVariaveis(\ )}
Este método retorna \emph{$true$} caso a expressão algébrica sob forma de variáveis (\(A+B*C\)) informada na classe possua caracteres estranhos à uma expressão válida, para isso, utilizou-se uma expressão regular. 

\subsubsection{public int avaliar(\ ) throws ProcessadorException}
Dada uma expressão aritmética numérida válida, este método retorna o valor resultante da expressão,  \emph{representa o requisito 3.4 do trabalho}.

\subsubsection{public void validarVariavel(\ ) throws ProcessadorException}
Valida uma expressão algébrica formada por variáveis simbólicas.

\subsubsection{public void validarNumerico(\ ) throws ProcessadorException}
Valida uma expressão aritmética formada por valores numéricos.

\subsubsection{public static int getPrioridade(String operador) throws ProcessadorException}
Retorna a prioridade do operador aritmético informado (multiplicação, divisão, soma, subtração).

\subsubsection{public static boolean isParenteses(String s)}
Retorna \emph{$true$} caso o caractere informado seja um parêntese.

\subsubsection{public static boolean isOperador(String s)}
Retorna \emph{$true$} caso o caractere informado seja um operador aritmético válido (+, -, *, /).

\subsubsection{public String getPosfixa(boolean comVariaveis) throws ProcessadorException}
Retorna a expressão aritmética dada para sua forma posfixa, \emph{representa o requisito 3.3 do trabalho}.

\subsubsection{public String getExpressao(\ )}
Retorna a expressão infixa associada ao objeto.

\subsubsection{public void setExpressao(String expressao) }
Atribui ao objeto a expressão aritmética infixa a ser trabalhada.

\subsubsection{public static boolean isValorVariavel(String s)}
Verifica se o caractere apresentado representa uma variável simbólica, ou seja, uma letra do conjunto [A-Z].

\subsubsection{public boolean isExpressaoValida(\ )}
Retorna \emph{$true$} caso os parênteses da expressão dada estejam corretamente aninhados e balanceados, \emph{representa o requisito 3.2 do trabalho}.

\subsubsection{public String[\ ] getVetorNumerico(\ )}
Transforma a expressão aritmética numérica infixa em um vetor de Strings que representam cada componente da expressão.

\subsubsection{public String[\ ] getVetorVariavel(\ )}
Transforma a expressão aritmética com variáveis simbólicas infixa em um vetor de Strings que representam cada componente da expressão.

\subsubsection{public String[\ ] getParenteses(\ )}
Retorna um vetor de Strings contendo todos os parenteses da expressão.

\subsubsection{public static String[\ ] processaRegex(String regex, String s)}
Método utilitário usado para converter uma String em um vetor de Strings utilizando uma expressão regular.

\subsection{ExpressaoGUI.java}
Classe que representa a interface gráfica (GUI - $Graphical$ $User$ $Interface$), utilizada pelo usuário na execução do programa.

\subsection{ProcessadorException.java}
Exceção criada para identificar erros que decorrem do processamento da expressão aritmética.

\section{Estudo de Complexidade}
Um estudo acerca da complexidade dos métodos apresentado foi realizado, como requisitos para o trabalho, são eles:

\subsection{public boolean isExpressaoValida()}
\begin{lstlisting}
    public boolean isExpressaoValida() {
        Pilha p = new Pilha();
        String[] vetor = getParenteses();
        for (String e : vetor) {
            if ("(".equals(e)) {
                p.empilhar(e);
            } else {
                try {
                    p.desempilhar();
                } catch (PilhaVaziaException ex) {
                    return false;
                }
            }
        }
        return p.isVazio();
    }
\end{lstlisting}
Estudo da complexidade linha a linha:
\begin{itemize}
  \item Linha 2 - 1
  \item Linha 3 - 1
  \item Linha 4 - n
  \item Linha 5 - n
  \item Linha 6 - n/2
  \item Linha 7 - n/2
  \item Linha 15 - 1
\end{itemize}
Ao final teremos \(3n+3\), ou seja \(O(n)=n\).

Ou seja, a curva $O(n)$ apresenta um crescimento linear, que varia de acordo com $n$ (a quantidade de elementos da pilha).

\subsection{public String getPosfixa(boolean comVariaveis) throws ProcessadorException}
\begin{lstlisting}
    public String getPosfixa(boolean comVariaveis) throws ProcessadorException {        
        String[] vetor;       
        if(comVariaveis){
            validarVariavel();
            vetor = getVetorVariavel();
        }else{
            validarNumerico();
            vetor = getVetorNumerico();
        }       
        String resposta = "";
        Pilha pilha = new Pilha();       
        for (String e : vetor) {
            if (!comVariaveis && isValorNumerico(e)) {
                resposta += " " + e;
            }          
            if (comVariaveis && isValorVariavel(e)) {
                resposta += " " + e;
            }
            if (isOperador(e)) {
                while (!pilha.isVazio() && !isParenteses((String) pilha.getTopo()) && !(getPrioridade(e) > getPrioridade((String) pilha.getTopo()))) {
                    resposta += " " + pilha.desempilhar();
                }
                pilha.empilhar(e);
            }
            if (isParenteses(e)) {
                if ("(".equals(e)) {
                    pilha.empilhar(e);
                } else if (")".equals(e)) {
                    while (!"(".equals(pilha.getTopo())) {
                        resposta += " " + pilha.desempilhar();
                    }
                    pilha.desempilhar();
                }
            }
        }
        while (!pilha.isVazio()) {
            resposta += " " + pilha.desempilhar();
        }      
        resposta = resposta.trim();
        return resposta;
    }
\end{lstlisting}

Estudo da complexidade linha a linha:
\begin{itemize}
  \item Linhas:  3, 4, 5, 10, 11 - 1
  \item Linhas: 12, 13, 14, 16, 17, 19, 20, 21, 23, 25,26, 27, 28, 29, 30, 32,
  36, 37 - n
  \item Linhas: 39, 40 - 1
\end{itemize}
Ao final teremos \(18n+7\), ou seja \(O(n)=n\).

Ou seja, a curva $O(n)$ apresenta um crescimento linear, que varia de acordo com $n$ (a quantidade de elementos da pilha).

\subsection{public int avaliar() throws ProcessadorException}
\begin{lstlisting}
    public int avaliar() throws ProcessadorException {
        validarNumerico();        
        Pilha p = new Pilha();
        String[] vetor = processaRegex("[0-9]+|.", getPosfixa(false));
        for(String e : vetor){
            if(" ".equals(e)){
                continue;
            }            
            if(isValorNumerico(e)){
                p.empilhar(e);
            }            
            if(isOperador(e)){
                int valor1, valor2, res = 0;
                valor1 = Integer.parseInt((String)p.desempilhar());
                valor2 = Integer.parseInt((String)p.desempilhar());
                if("+".equals(e)){
                    res = valor1+valor2;
                }                
                if("-".equals(e)){
                    res = valor1-valor2;
                }                
                if("*".equals(e)){
                    res = valor1*valor2;
                }                
                if("/".equals(e)){
                    res = valor1/valor2;
                }              
                p.empilhar(Integer.toString(res));
            }
        }
        if(p.getTamanho()>1){
            throw new ProcessadorException("Erro ao processar expressao: " + getExpressao());
        }
        return Integer.parseInt((String)p.getTopo());
    }
\end{lstlisting}

Estudo da complexidade linha a linha:
\begin{itemize}
  \item Linhas: 2, 3 , 4 - 1;
  \item Linhas: 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 25, 26,
  28 - n;
  \item Linhas: 31, 32, 34 - 1;
\end{itemize}
Ao final teremos \(18n+6\), ou seja \(O(n)=n\).

Ou seja, a curva $O(n)$ apresenta um crescimento linear, que varia de acordo com $n$ (a quantidade de elementos da pilha).

\section{Listagem de testes executados}
Para a realização dos testes, foir criada a classe TesteExpressaoAritmetica.java e foram realizados os testes conforme consta abaixo:
\begin{lstlisting}
package gov.unb.cic.ed.trabalhopilhaed;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

public class TesteExpressaoAritmetica
        extends TestCase {

    public TesteExpressaoAritmetica(String testName) {
        super(testName);
    }

    public static Test suite() {
        return new TestSuite(TesteExpressaoAritmetica.class);
    }

    public void testExpressoes() throws ProcessadorException {
        //  Infixa                          Posfixa
        //1 (A+B*C)                         A B C * +
        //2 (A*(B+C)/D-E)                   A B C + * D / E -
        //3 (A+B*(C-D*(E-F)-G*H)-I*3)       A B C D E F - * - G H * - * + I 3 * -
        //4 (A+B*C/D*E-F)                   A B C * D / E * + F -
        //5 (A+(B-(C+(D-(E+F)))))           A B C D E F + - + - +
        //6 (A*(B+(C*(D+(E*(F+G))))))       A B C D E F G + * + * + *
        ExpressaoAritmetica e = new ExpressaoAritmetica();
        
        //1
        e.setExpressao("(A+B*C)");
        assertEquals("A B C * +", e.getPosfixa(true));
        
        //2
        e.setExpressao("(A*(B+C)/D-E)");
        assertEquals("A B C + * D / E -", e.getPosfixa(true));
        
        //3
        e.setExpressao("(A+B*(C-D*(E-F)-G*H)-I*J)");
        assertEquals("A B C D E F - * - G H * - * + I J * -", e.getPosfixa(true));
        
        //4
        e.setExpressao("(A+B*C/D*E-F)");
        assertEquals("A B C * D / E * + F -", e.getPosfixa(true));
        
        //5
        e.setExpressao("(A+(B-(C+(D-(E+F)))))");
        assertEquals("A B C D E F + - + - +", e.getPosfixa(true));
        
        //6
        e.setExpressao("(A*(B+(C*(D+(E*(F+G))))))");
        assertEquals("A B C D E F G + * + * + *", e.getPosfixa(true));                
        
    }
}


\end{lstlisting}
Após a realização dos testes, foi verificado que todos foram bem sucedidos. 
\section{Conclusão}
Pode-se concluir que a utilização de pilhas é recomendável quando da necessidade de algoritmos para processar expressões aritméticas, realizando a conversão de sua forma infixa para posfixa e avaliando seu resultado. Como já ocorre em inúmeras calculadoras gráficas e científicas, tendo em vista, que a forma posfixa, e suas derivadas, de uma expressão separa elemento a elemento de uma maneira mais eficiente computacionalmente.

\nocite{*}					%Imprime toda a bibliografia
\bibliography{bibliografia}		
\bibliographystyle{plain}		
\end{document}
